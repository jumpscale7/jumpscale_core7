#!/usr/bin/env jspython

from JumpScale.baselib import cmdutils
import JumpScale.baselib.atyourservice
from JumpScale import j
import sys
j.application.start('ays')

parser = cmdutils.ArgumentParser()
j.logger.enabled = True
j.logger.consolelogCategories.append('atyourserviceAction')

commands = ['install', 'list', 'stop', 'start', 'restart', 'build', 'prepare', "mdupdate", "update", "reset", "resetstate",
            "removedata", "monitor", "configure", "cleanup", "export", "import", "uninstall", "push", "execute",
            "status", "nodes", "consume", "console"]

help = """
ays commands:

    install:
    - download all related git repo's (if not downloaded yet, otherwise update)
    - prepare & copyfiles & configure
    - start the app
    list:
    - list the ayses
    stop-start-restart
    build
    - if build instructions are given the build repo's will be downloaded & build started
    - build happens to production dir
    mdupdate
    - update all git repo's which have services metadata
    update
    - go over all related repo's & do an update
    - copy the files again
    - restart the app
    reset
    - remove build repo's !!!
    - remove state of the app (same as resetstate) in jumpscale (the configuration info)
    - remove data of the app
    resetstate
    - remove state of the app (same as resetstate) in jumpscale (the configuration info)
    removedata
    - remove data of app (e.g. database, e.g. vmachine when node ays)
    execute
    - execute cmd on service e.g. ssh cmd on node jp or sql statement on database ...
    - use --cmd with to specify command to be execute
    monitor
    - do uptime check, local monitor & remote monitor check, if all ok return True
    configure
    - configure the app
    cleanup
    - remote old logfiles, ...
    export/import
    - use --url to specify where to import from or export to
    create
    - interactively create a ays
    status
    - display status of installed ayses (domain, name, priority, version, port)
    nodes
    - display all remote nodes available for ays remote execution
    consume
    - consume specified producer category and instance
    console
    - connect thourgh ssh to remote node
"""

parser.add_argument("action", choices=commands, help='Command to perform\n')
parser.add_argument("--path", required=False, help='path to git config repo to be use\n', default=None)
parser.add_argument("--noremote", required=False, action='store_true', help='bypass the @remote wrapper\n', default=False)

group = parser.add_argument_group(title="Package Selection")
group.add_argument('-q', '--quiet', required=False, action='store_true', help='Put in quiet mode')
group.add_argument('-n', '--name', required=False, help='Name of ays to be installed', default="")
group.add_argument('-d', '--domain', required=False, help='Name of ays domain to be installed', default="")
group.add_argument('-i', '--instance', required=False, help='Instance of ays (default main)', default="")
group.add_argument('-f', '--force', required=False, action='store_true', help='auto answer yes on every question')
group.add_argument('--nodeps', required=False, action='store_true', help='Don\'t perfomr action on dependencies, default False', default=False)
group.add_argument('--verbose', required=False, action='store_true', default=False, help='Verbose output.')
group.add_argument('--local', required=False, action='store_true', default=False, help='Apply action locally. No remote services will be executed.')
group.add_argument('--targetname', required=False, default=None, help='node instance on which to execute the action')
group.add_argument('--targettype', required=False, default=None, help='node type on which to execute the action')
# group.add_argument('--lua',required=False,default=False,action="store_true",help='execute from actions.lua file')

# install
group = parser.add_argument_group(title="Install/Update/Expand/Configure")
group.add_argument('--data', required=False,
                   help='use this to pass hrd information to ays e.g. \'redis.name:system redis.port:9999 redis.disk:0\'')
group.add_argument('--cmd', required=False, help='use this to pass cmd to services e.g. \'ls -l\'')
group.add_argument('--parent', required=False,
                   help='parent services (domain__name__instance). Can also define ancestors through \'ancestordomain__ancestorname__ancestorinstance:parentdomain__parentname__parentinstance\'')
group.add_argument('--immediate', required=False, action='store_true',
                   default=False, help='use this to get the first level match of services')
group.add_argument('-r', '--reinstall', required=False, action='store_true', help='Reinstall found service')
group.add_argument('-s', '--single', required=False, action='store_true', help='Do not install dependencies')

# export/import
group = parser.add_argument_group(title="Export/Import")
group.add_argument('--url', required=False, help='uncpath to export to or import from')

# list
group = parser.add_argument_group(title="List")
group.add_argument('--installed', required=False, action='store_true', default=None, help='List installed ayses')

group = parser.add_argument_group(title="Consume/Produce")
group.add_argument('--category', required=False, help='Producer category')
group.add_argument('--producer', required=False, help='Producer instance')


def sorter(jp1, jp2):
    prio1 = jp1.getPriority()
    prio2 = jp2.getPriority()
    if prio1 != prio2:
        return cmp(prio1, prio2)
    else:
        key1 = "%s_%s" % (jp1.domain, jp2.name)
        key2 = "%s_%s" % (jp2.domain, jp2.name)
        return cmp(key1, key2)


def getHRDData(args):
    hrddata = {}
    if args.data is not None:
        if args.data.find("#") != -1:
            for line in args.data.split("#"):
                if line.find("=") != -1:
                    var, data = line.split("=", 1)
                    hrddata[var.strip()] = data.strip()
        else:
            tags = j.core.tags.getObject(args.data)
            hrddata = tags.getDict()
    return hrddata

def getRemote(args):
    parent = getParent(args)
    path = args.path if args.path else ('%s/domain__name__instance' % parent.path if parent else '')
    remote = [parent for parent in j.atyourservice.findParents(path=path) if 'node' in parent.categories]
    if not remote:
        return None, None
    remote = remote[-1]
    return remote.categories[0], remote.instance

def getParent(args, precise=False):
    if args.parent is None:
        return None
    if not isinstance(args.parent, basestring):
        return args.parent
    ss = args.parent.split("__")
    if len(ss) % 3 != 0:
        j.events.opserror_critical(msg="Bad format for --parent. Should be domain__name__instance")
    parent = '__'.join(ss[:-3]) if ss[:-3] else None
    return j.atyourservice.get(domain=ss[-3], name=ss[-2], instance=ss[-1], parent=parent, precise=args.immediate)


def getTarget(args):
    return j.atyourservice.get('jumpscale', name=(args.targettype or ''), instance=(args.targetname or ''),
                               parent=getParent(args, precise=args.immediate))


def getServices(args, filterRemote=False, parent=None, precise=False):
    res = []
    services = j.atyourservice.findServices(args.domain, args.name, args.instance, parent=parent, precise=precise)
    if args.noremote:
        for service in services:
            service.noremote = True
    if args.cmd:
        for service in services:
            service.cmd = args.cmd
    if filterRemote:
        for s in services:
            if len(s.hrd.getDictFromPrefix('producer.node')) == 0:
                res.append(s)
    else:
        res = services
    return res

if '--help' in sys.argv or '-h' in sys.argv:
    print help

args = parser.parse_args()
args.deps = not args.nodeps

if args.path is not None:
    j.dirs.createGitConfigRepo(args.path)
    j.dirs.gitConfigDir = args.path


# jpargs = {}
# if args.node!=None:
#     jpargs["node2execute"]=args.node
# if args.lua!=None:
#     jpargs["lua"]=args.lua

# if args.cmd is not None:
    # jpargs['cmd'] = args.cmd.strip()


j.application.debug = args.verbose


if args.quiet:
    class NullDevice():

        def write(self, s):
            pass
    sys.stdout = NullDevice()

if args.action == 'console':
    target = getTarget(args)
    if not target:
        raise RuntimeError('No target with targettype "%s" and targetname "%s" was found' % (args.targettype, args.targetname))
    target.cmd = 'bash'
    target.execute(deps=False)

else:
    if args.targettype or args.targetname:
        args.parent = getTarget(args)

    services = getServices(args, filterRemote=args.local, parent=args.parent, precise=args.immediate)
    if args.action == 'configure':
        for service in services:
            service.configure(deps=args.deps)
            service.start()

    elif args.action == 'prepare':
        for service in services:
            service.prepare(deps=args.deps)

    elif args.action == 'install':
        # if path is present, it means the is triggerd by remote, so service.hrd
        # and actions.py is already present on system.
        if args.instance == "":
            args.instance = 'main'

        if args.path is not None:
            service = j.atyourservice.get(domain=args.domain, name=args.name, instance=args.instance)
            if args.noremote:
                service.noremote = args.noremote
            service.install(start=True, deps=True, reinstall=args.reinstall)
        else:
            if len(services) > 0:
                for s in services:
                    if args.noremote:
                        s.noremote = args.noremote
                    s.install(deps=args.deps, reinstall=args.reinstall)
            else:
                tmpls = j.atyourservice.findTemplates(domain=args.domain, name=args.name)
                if len(tmpls) > 1:
                    raise RuntimeError("multiple templates found for %s__%s. Be more precise please" % (args.domain.args.name))
                if len(tmpls) <= 0:
                    raise RuntimeError("no templates found for %s__%s. Be more precise please" % (args.domain, args.name))
                category, targetname = getRemote(args)
                if category:
                    rs = tmpls[0].newInstance(instance=args.instance, args=getHRDData(args),
                                              parent=getParent(args, precise=True), precise=True)
                    rs.consume(category, targetname)
                tmpls[0].install(instance=args.instance, start=True, deps=(not args.single), reinstall=args.reinstall,
                                 args=getHRDData(args), parent=getParent(args, precise=True), noremote=args.noremote)

    elif args.action == 'update':
        for service in services:
            service.update(deps=args.deps, reinstall=args.reinstall)

    elif args.action == 'monitor':
        # TODO
        pass

    elif args.action == 'publish':
        # TODO
        pass

    elif args.action == 'reset':
        for service in services:
            service.reset(deps=args.deps)

    elif args.action == 'removedata':
        for service in services:
            service.removedata(deps=args.deps)

    elif args.action == 'resetstate':
        for service in services:
            service.resetstate(deps=args.deps)

    elif args.action == 'export':
        # TODO
        pass

    elif args.action == 'import':
        # TODO
        pass

    elif args.action == 'restart':
        for service in services:
            try:
                service.restart(deps=args.deps)
            except:
                continue

    elif args.action == 'start':
        for service in sorted(services, cmp=sorter):
            try:
                service.start(deps=args.deps)
            except:
                continue

    elif args.action == 'stop':
        for service in sorted(services, cmp=sorter):
            try:
                service.stop(deps=args.deps)
            except:
                continue

    elif args.action == 'execute':
        for service in sorted(services, cmp=sorter):
            service.args['cmd'] = args.cmd
            service.execute(deps=args.deps)

    elif args.action == 'build':
        for service in sorted(services, cmp=sorter):
            service.build(deps=args.deps)

    elif args.action == 'uninstall':
        for service in sorted(services, cmp=sorter):
            service.uninstall(deps=args.deps)

    elif args.action == 'consume':
        for service in sorted(services, cmp=sorter):
            service.consume(args.category, args.producer)

    # elif args.action == 'produce':
    #     services = getServices(args, parent=args.parent, precise=args.immediate)
    #     for service in sorted(services, cmp=sorter):
    #         service.(deps=args.deps)

    elif args.action == 'push':
        # TODO
        pass

    elif args.action == 'mdupdate':
        j.atyourservice.updateTemplatesRepo()

    elif args.action == 'list':
        def printServices(services, installed=False):
            if installed:
                form = '%(domain)-15s %(name)-25s %(instance)-25s %(parent)-20s'
                print form % {'domain': 'DOMAIN', 'name': 'NAME', 'instance': 'INSTANCE', "parent": "PARENT"}
            else:
                form = '%(domain)-15s %(name)-25s'
                print form % {'domain': 'DOMAIN', 'name': 'NAME'}
            print '=' * 70
            print ''
            for service in sorted(services, key=lambda p: "%s_%s" % (p.domain, p.name)):
                if installed:
                    print form % {'name': service.name, 'domain': service.domain, 'instance': service.instance, 'parent': service.parent}
                else:
                    print form % {'name': service.name, 'domain': service.domain}
        if args.installed:
            services = j.atyourservice.findServices(args.domain, args.name, args.instance)
        else:
            services = j.atyourservice.findTemplates(args.domain, args.name)
        printServices(services, installed=args.installed)

    elif args.action == 'status':
        j.logger.consolelogCategories.remove('atyourserviceAction')
        # dont leave categories empty
        j.logger.consolelogCategories.append('nologs')

        def printServices(services):

            form = '%(domain)-15s %(name)-20s %(instance)-10s %(prio)4s %(status)-8s %(ports)s'
            print form % {'domain': 'DOMAIN', 'name': 'NAME', 'instance': 'Instance', 'prio': 'Prio', 'status': 'Status',
                          'ports': 'Ports'}
            print '=' * 70
            print ''
            for service in sorted(services, cmp=sorter):
                if not service.getProcessDicts():
                    continue
                isrunning = service.actions.check_up_local(service, wait=False)
                status = 'RUNNING' if isrunning else 'HALTED'
                ports = ', '.join(str(x) for x in service.getTCPPorts())
                print form % {'name': service.name, 'domain': service.domain, 'instance': service.instance, 'prio': service.getPriority(), 'status': status, 'ports': ports}

        printServices(services)

        # elif args.action == 'nodes':
        #     def printNodes(allNodes):

        #         form = '%(type)-15s %(instance)-10s'
        #         print form % {'type': 'TYPE', 'instance': 'INSTANCE'}
        #         print '=' * 25
        #         for typ,nodes in allNodes.iteritems():
        #             print ''
        #             for node in nodes:
        #                 print form % {'type': typ, 'instance': node}

        #     allNodes = j.services.remote.getAllNodes()
        #     printNodes(allNodes)

j.application.stop()
j.logger.enabled = False
