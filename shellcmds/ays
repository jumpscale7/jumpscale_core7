#!/usr/bin/env jspython

from JumpScale.baselib import cmdutils
import JumpScale.baselib.atyourservice
from JumpScale import j
import sys
import copy
j.application.start('jservice')

parser = cmdutils.ArgumentParser()
j.logger.enabled = True
j.logger.consolelogCategories.append('atyourserviceAction')

commands = ['install','list','stop','start','restart','build','prepare',"mdupdate","update","reset","resetstate",\
    "removedata","monitor","configure","cleanup","export","import","uninstall","push","execute", "status","nodes"]

help="""
jservice commands:

    install:
    - download all related git repo's (if not downloaded yet, otherwise update)
    - prepare & copyfiles & configure
    - start the app
    list:
    - list the jservices
    stop-start-restart
    build
    - if build instructions are given the build repo's will be downloaded & build started
    - build happens to production dir
    mdupdate
    - update all git repo's which have jservice metadata
    update
    - go over all related repo's & do an update
    - copy the files again
    - restart the app
    reset
    - remove build repo's !!!
    - remove state of the app (same as resetstate) in jumpscale (the configuration info)
    - remove data of the app
    resetstate
    - remove state of the app (same as resetstate) in jumpscale (the configuration info)
    removedata
    - remove data of app (e.g. database, e.g. vmachine when node jservice)
    execute
    - execute cmd on service e.g. ssh cmd on node jp or sql statement on database ...
    - use --cmd with to specify command to be execute
    monitor
    - do uptime check, local monitor & remote monitor check, if all ok return True
    configure
    - configure the app
    cleanup
    - remote old logfiles, ...
    export/import
    - use --url to specify where to import from or export to
    create
    - interactively create a jservice
    status
    - display status of installed jservices (domain, name, priority, version, port)
    nodes
    - display all remote nodes available for jservice remote execution
"""

parser.add_argument("action", choices=commands, help='Command to perform\n')
parser.add_argument("--path", required=False, help='path to git config repo to be use\n',default=None)
parser.add_argument("--noremote", required=False, action='store_true', help='bypass the @remote wrapper\n',default=False)

group = parser.add_argument_group(title="Package Selection")
group.add_argument('-q','--quiet', required=False, action='store_true', help='Put in quiet mode')
group.add_argument('-n','--name',required=False, help='Name of jservice to be installed',default="")
group.add_argument('-d','--domain',required=False, help='Name of jservice domain to be installed',default="")
group.add_argument('-i','--instance',required=False, help='Instance of jservice (default main)',default="")
group.add_argument('-f','--force',required=False, action='store_true',help='auto answer yes on every question')
group.add_argument('--nodeps',required=False, action='store_true',help='Don\'t perfomr action on dependencies, default False',default=False)
group.add_argument('--verbose', required=False, action='store_true',default=False, help='Verbose output.')
# group.add_argument('--node',required=False,default=None,help='node on which to execute the action')
# group.add_argument('--lua',required=False,default=False,action="store_true",help='execute from actions.lua file')

#install
group = parser.add_argument_group(title="Install/Update/Expand/Configure")
group.add_argument('--data', required=False, help='use this to pass hrd information to jservice e.g. \'redis.name:system redis.port:9999 redis.disk:0\'')
group.add_argument('--cmd', required=False, help='use this to pass cmd to services e.g. \'ls -l\'')
group.add_argument('--parent', required=False, help='parent services (domain.name.instance)')
group.add_argument('-r', '--reinstall', required=False, action='store_true', help='Reinstall found service')
group.add_argument('-s', '--single', required=False, action='store_true', help='Do not install dependencies')

#export/import
group = parser.add_argument_group(title="Export/Import")
group.add_argument('--url', required=False, help='uncpath to export to or import from')

#list
group = parser.add_argument_group(title="List")
group.add_argument('--installed', required=False, action='store_true',default=None, help='List installed jservices')


def sorter(jp1, jp2):
    prio1 = jp1.getPriority()
    prio2 = jp2.getPriority()
    if prio1 != prio2:
        return cmp(prio1, prio2)
    else:
        key1 = "%s_%s" % (jp1.domain, jp2.name)
        key2 = "%s_%s" % (jp2.domain, jp2.name)
        return cmp(key1, key2)

def getHRDData(args):
    hrddata={}
    if args.data!=None:
        if args.data.find("#")!=-1:
            for line in args.data.split("#"):
                if line.find("=")!=-1:
                    var,data=line.split("=",1)
                    hrddata[var.strip()]=data.strip()
        else:
            tags=j.core.tags.getObject(args.data)
            hrddata=tags.getDict()
    return hrddata

def getParent(args):
    if args.parent == None:
        return None
    ss = args.parent.split(".")
    if len(ss) != 3:
        j.events.opserror_critical(msg="bad format for --parent. should be domain.name.instance")
    return j.atyourservice.get(domain=ss[0],name=ss[1],instance=ss[2])

def getServices(args, filterRemote=False):
    res = []
    services = j.atyourservice.findServices(args.domain,args.name,args.instance)
    if args.noremote:
        for service in services:
            service.noremote = True
    if args.cmd:
        for service in services:
            service.cmd = args.cmd
    if filterRemote:
        for s in services:
            if len(s.hrd.getDictFromPrefix('producer.node')) == 0:
                res.append(s)
    else:
        res = services
    return res

if '--help' in sys.argv or '-h' in sys.argv:
    print help

args = parser.parse_args()
args.deps=not args.nodeps

if args.path != None:
    j.dirs.createGitConfigRepo(args.path)
    j.dirs.gitConfigDir = args.path


# jpargs = {}
# if args.node!=None:
#     jpargs["node2execute"]=args.node
# if args.lua!=None:
#     jpargs["lua"]=args.lua

# if args.cmd is not None:
    # jpargs['cmd'] = args.cmd.strip()



j.application.debug=args.verbose

if args.quiet:
    class NullDevice():
        def write(self, s):
            pass
    sys.stdout = NullDevice();

if args.action == 'configure':
    services = getServices(args)
    for service in services:
        service.configure(deps=args.deps)
        service.start()

if args.action == 'prepare':
    services = getServices(args)
    for service in services:
        service.prepare(deps=args.deps)

elif args.action == 'install':
    # if path is present, it means the is triggerd by remote, so service.hrd and actions.py is already present on system.
    if args.instance == "":
        args.instance = 'main'


    if args.path != None or args.noremote:
        service = j.atyourservice.get(domain=args.domain,name=args.name,instance=args.instance)
        service.noremote = args.noremote
        service.install(start=True,deps=True,reinstall=args.reinstall)
    else:
        services = getServices(args)
        if len(services) > 0:
            for s in services:
                s.install(deps=args.deps, reinstall=args.reinstall)
        else:
            tmpls = j.atyourservice.findTemplates(domain=args.domain,name=args.name)
            if len(tmpls) > 1:
                raise RuntimeError("multiple templates found for %s__%s be more precise please"%(args.domain.args.name))
            if len(tmpls) <= 0:
                raise RuntimeError("no templates found for %s__%s be more precise please"%(args.domain, args.name))

            tmpls[0].install(instance=args.instance,start=True,deps=(not args.single), reinstall=args.reinstall, args=getHRDData(args), parent=getParent(args),noremote=args.noremote)

elif args.action == 'update':
    services = getServices(args)
    for service in services:
        service.update(deps=args.deps, reinstall=args.reinstall)

elif args.action == 'monitor':
    # TODO
    pass

elif args.action == 'publish':
    # TODO
    pass

elif args.action == 'reset':
    services = getServices(args)
    for service in services:
        service.reset(deps=args.deps)

elif args.action == 'removedata':
    services = getServices(args)
    for service in services:
        service.removedata(deps=args.deps)

elif args.action == 'resetstate':
    services = getServices(args)
    for service in services:
        service.resetstate(deps=args.deps)

elif args.action == 'export':
    # TODO
    pass

elif args.action == 'import':
    # TODO
    pass

elif args.action == 'restart':
    filterRemote = False
    if args.instance == "":
        filterRemote = True
    services = getServices(args)
    for service in services:
        service.restart(deps=args.deps)

elif args.action == 'start':
    filterRemote = False
    if args.instance == "":
        filterRemote = True
    services = getServices(args,filterRemote=filterRemote)
    for service in sorted(services, cmp=sorter):
        service.start(deps=args.deps)

elif args.action == 'stop':
    filterRemote = False
    if args.instance == "":
        filterRemote = True
    services = getServices(args)
    for service in sorted(services, cmp=sorter):
        service.stop(deps=args.deps)

elif args.action == 'execute':
    services = getServices(args)
    for service in sorted(services, cmp=sorter):
        service.args['cmd'] = args.cmd
        service.execute(deps=args.deps)

elif args.action == 'build':
    services = getServices(args)
    for service in sorted(services, cmp=sorter):
        service.build(deps=args.deps)

elif args.action == 'uninstall':
    services = getServices(args)
    for service in sorted(services, cmp=sorter):
        service.uninstall(deps=args.deps)

elif args.action == 'push':
    # TODO
    pass

elif args.action == 'list':
    def printServices(services, installed=False):
        if installed:
            form = '%(domain)-15s %(name)-25s %(instance)-25s %(parent)-20s'
            print form % {'domain': 'DOMAIN', 'name': 'NAME', 'instance': 'INSTANCE', "parent": "PARENT"}
        else:
            form = '%(domain)-15s %(name)-25s'
            print form % {'domain': 'DOMAIN', 'name': 'NAME'}
        print '=' * 70
        print ''
        for service in sorted(services, key=lambda p: "%s_%s" % (p.domain, p.name)):
            if installed:
                print form % {'name': service.name, 'domain': service.domain, 'instance' : service.instance, 'parent': service.parent }
            else:
                print form % {'name': service.name, 'domain': service.domain}
    if args.installed:
        services = j.atyourservice.findServices(args.domain,args.name,args.instance)
    else:
        services = j.atyourservice.findTemplates(args.domain,args.name)
    printServices(services, installed=args.installed)

elif args.action == 'status':
    j.logger.consolelogCategories.remove('atyourserviceAction')
    j.logger.consolelogCategories.append('nologs') # dont leave categories empty
    def printServices(services):

        form = '%(domain)-15s %(name)-20s %(instance)-10s %(prio)4s %(status)-8s %(ports)s'
        print form % {'domain': 'DOMAIN', 'name': 'NAME', 'instance': 'Instance', 'prio': 'Prio', 'status': 'Status', \
            'ports': 'Ports'}
        print '=' * 70
        print ''
        for service in sorted(services, cmp=sorter):
            if not service.getProcessDicts():
                continue
            isrunning = service.actions.check_up_local(service,wait=False)
            status = 'RUNNING' if isrunning else 'HALTED'
            ports = ', '.join( str(x) for x in service.getTCPPorts() )
            print form % {'name': service.name, 'domain': service.domain, 'instance': service.instance, 'prio': service.getPriority(), 'status': status, 'ports': ports}

    services = j.atyourservice.findServices()
    printServices(services)

# elif args.action == 'nodes':
#     def printNodes(allNodes):

#         form = '%(type)-15s %(instance)-10s'
#         print form % {'type': 'TYPE', 'instance': 'INSTANCE'}
#         print '=' * 25
#         for typ,nodes in allNodes.iteritems():
#             print ''
#             for node in nodes:
#                 print form % {'type': typ, 'instance': node}

#     allNodes = j.services.remote.getAllNodes()
#     printNodes(allNodes)

j.application.stop()
j.logger.enabled = False
