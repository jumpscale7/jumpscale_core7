#!/usr/bin/env python
from JumpScale import j

j.application.appname = "jumpscale:jsexec"
j.application.start()

from JumpScale.baselib import cmdutils

parser = cmdutils.ArgumentParser()

parser.add_argument('-r', '--remote', help='hostname of node.',default="")
parser.add_argument('-p', '--passwd', help='Root password to use, if any.',default="")

parser.add_argument('-n','--name',required=False, help='Names of jumpscript to execute (comma separated)',default="")
parser.add_argument('-o','--gridname',required=False, help='Name of grid.',default="")

parser.add_argument('-c', '--cfgname', help='Name of cfg directory.',default="")
parser.add_argument('-e', '--extra', help='Extra config data in tag format e.g. cpasswd:123,myname:kds ',default="")
parser.add_argument('-f','--force',required=False, action='store_true',help='auto answer yes on every question and redo even if already done')
parser.add_argument('-x','--command',required=False, help='if this one is used then just this command will be execute',default="")
parser.add_argument('-s','--sync',required=False, action='store_true',help='then will be done one after the other')
parser.add_argument('-g',  action='store_true', required=False, help='Apply on all active nodes on grid')
parser.add_argument('--roles', required=False, help='Used with -g. Apply on active nodes that have these roles. ex: --roles=node, computenode.kvm(note the = sign). List is comma seperated')
parser.add_argument('-t','--timeout', required=False, type=int, default=0, help='Time to wait to if connection is not available')
parser.add_argument('--runid', required=False, type=str, default="", help='Give run a specific id.')
parser.add_argument('--reset', action='store_true',required=False, default=False, help='If reset info for that run will be removed from redis.')

args = parser.parse_args()
args.action=None
args.local=False

if args.command=="" and args.name=="":
    raise RuntimeError("command or name needs to be given.")

import JumpScale.baselib.redis

from multiprocessing import Process, Queue

class RedirectSTDOUT:
    def __init__(self,name):
        self.oldstdout=sys.stdout        
        self.name=name
        # self.redis.hset("admin:output",self.name,"")
        self.out=""

    def isatty(self):
        return True

    def flush(self):
        pass

    def write(self, text):
        # self.oldstdout.write(text)
        # out=str(self.redis.hget("admin:output",self.name))
        self.out+=str(text)
        # self.redis.hset("admin:output",self.name,out)

import sys

import time

def doRemote(args,hostkey,cmd):
    # j.admin.hosts=[host]

    def report(node,args):
        sr=node.getScriptRun()
        sr.state="ERROR"
        if args.sync==False:
            sr.out+="\nSTDOUT:\n%s"%r.out            
        if sr.out<>"":
            print "ERROR: COULD NOT EXECUTE: STDOUT:"
            print sr.out
        if sr.error<>"":
            print "ERROR: COULD NOT EXECUTE: ERROR:"
        print "ERROR: could not execute:%s on \n%s"%(cmd,node)
        j.admin.setNode(node)
        if args.sync:
            j.application.stop(1)
    
    gridname,name=hostkey.split("__")
    node=j.admin.getNode(gridname,name)
    sr=node.getScriptRun()
    if cmd<>"":        
        error=False
        r=RedirectSTDOUT(hostkey)
        print "EXECCMD:%s:%s:"%(hostkey,cmd)
        if args.sync==False:            
            sys.stdout=r
        try:
            node.executeCmds(cmd)
        except BaseException,e:
            sys.stdout=r.oldstdout            
            print "ERROR  :%s:%s:"%(hostkey,cmd)            
            error=True
            report(node,args)
        sys.stdout=r.oldstdout
        if sr.state<>"OK":
            print "ERROR  :%s:%s:"%(hostkey,cmd)
            report(node,args)
        elif not error:
            print "OK     :%s:%s:"%(hostkey,cmd)
    else:
        for cmd in args.name.split(","):  #name is name of jumpscript
            cmd=cmd.lower().strip()
            key="%s_%s"%(hostkey,cmd.strip())
            
            r=RedirectSTDOUT(key)            
            print "EXEC   :%s:%s:"%(hostkey,cmd)
            if args.sync==False:                                
                sys.stdout=r

            once=True
            if j.admin.args.force:
                once=False
            j.admin.executeForNode(node,jsname=cmd,once=once)
            sys.stdout=r.oldstdout
            if sr.state<>"OK":
                print "ERROR  :%s:%s:"%(hostkey,cmd)
                report(node,args)
            else:
                print "OK     :%s:%s:"%(hostkey,cmd)  

import JumpScale.baselib.admin

if __name__ == '__main__':
    # hosts=["cpu10","cpu12"]

    admin=j.tools.admin.get(args)
    j.admin=admin

    if args.gridname=="":
        node=j.admin.getNode()
        node.args=args
        j.admin.executeForNode(node,args.name,once=True,sshtest=False)
        exitcode=0

    else:
        for hostkey in j.admin.hostKeys:

            if not args.sync:
                p = Process(target=doRemote, args=(args,hostkey,args.command))
                p.start()
            else:
                doRemote(args,hostkey,args.command)

        if not args.sync:
            #need to wait till all done
            done=j.admin.getScriptRunInfo()
            nr=len(j.admin.hostKeys)
            while len(done)<nr:
                print "Still Running: %s/%s"%(nr-len(done),nr)
                time.sleep(2)
                done=j.admin.getScriptRunInfo()


        exitcode=j.admin.printResult()

    j.application.stop(exitcode)


