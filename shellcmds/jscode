#!/usr/bin/env jspython
import os
import sys
from JumpScale import j

from JumpScale.baselib import cmdutils

# import sys
# import time

j.application.start("jscode2")

parser = cmdutils.ArgumentParser()
parser.add_argument(
    "action", choices=['get', 'commit', 'push', 'update', 'status', 'list', 'init'], help='Command to perform')

parser.add_argument(
    '-n', '--name',
    help='name or partial name of repo, can also be comma separated, if not specified then will ask, if \'*\' then all.'
)
parser.add_argument('--url', help='url')

parser.add_argument('-m', '--message', help='commit message', default="new")
parser.add_argument('-b', '--branch', help='branch')
parser.add_argument('-r', '--revision', help='revision to checkout')
parser.add_argument('-t', '--tag', help='tag to checkout')

parser.add_argument(
    '-a', '--accounts', help='comma separated list of accounts, if not specified then will ask, if \'*\' then all.')

parser.add_argument('-u', '--update', required=False, action='store_true',
                    help='update merge before doing push or commit')

parser.add_argument('-f', '--force', required=False, action='store_true', help='auto answer yes on every question')
parser.add_argument('-d', '--deletechanges', required=False, action='store_true',
                    help='will delete all changes when doing update')

parser.add_argument('-o', '--onlychanges', required=False, action='store_true',
                    help='will only do an action where modified files are found')
parser.add_argument('--https', required=False, action='store_true',
                    help='Will use https instead of ssh')

opts = parser.parse_args()

if opts.accounts is None and opts.name is None:
    if j.system.fs.exists("%s/%s" % (j.system.fs.getcwd(), ".git")):
        # we are in repo
        opts.name = j.system.fs.getBaseName(j.system.fs.getcwd())
        opts.accounts = j.system.fs.getBaseName(j.system.fs.getParent(j.system.fs.getcwd()))


if opts.branch is not None and opts.action in ['status']:
    raise RuntimeError("Cannot specify branch when asking status")


if opts.action == 'init':
    # key_path = os.path.join(os.environ['HOME'], '.ssh', 'id_rsa')
    # if not os.path.exists(key_path):
    #     os.system('ssh-keygen -f %s' % key_path)

    username = raw_input('Git Username: ')
    email = raw_input('Git Email: ')
    j.do.loadSSHAgent(createkeys=False,keyname=username)
    os.system('git config --global user.name "%s"' % username)
    os.system('git config --global user.email "%s"' % email)

    # with open('/etc/profile.d/ssh-agent.sh', 'w') as script:
    #     script.write(SSH_AGENT_SCRIPT)
    print 'Please logout and relogin for your ssh keys to be loaded'

    sys.exit(0)

# from IPython import embed;embed()
repos = j.clients.git.find(opts.accounts, opts.name, interactive=True, returnGitClient=True)

repos = [(r.type, r.account, r.name, r.branchName, r, r.baseDir) for r in repos]

C="""
Host *
   StrictHostKeyChecking no
   UserKnownHostsFile=/dev/null
"""

if j.system.platformtype.isLinux():
    path=j.system.fs.joinPaths(os.environ["HOME"],".ssh","config")
    if not j.do.exists(path):
        j.do.writeFile(path,C)

if opts.action == "status":
    print ("\n\nSTATUS: account reponame                  " +
           "branch added:modified:deleted   insyncwithremote?   localrev       remoterev")
    print ("==============================================" +
           "===========================================================================")

for provider, account, reponame, branch, client, path in repos:

    # from IPython import embed;embed()
    if (j.application.config.exists("whoami.git.passwd") is False or
            j.application.config.exists("whoami.git.login") is False):
        raise RuntimeError(
            "git configuration not found, please install github_client service (ays install -n github_client)")
    else:
        _, url, _ = j.do.execute("cd %s;git config --get remote.origin.url" % path)
        url = url.strip()
        if str(url).find('@') and opts.https:
             _, _, _, _, repository_url = j.do.rewriteGitRepoUrl(url=str(url), protocol='https')
        elif str(url).find("@") == -1 and not opts.https:
            login = j.application.config.get("whoami.git.login")
            passwd = j.application.config.get("whoami.git.passwd")
            _, _, _, _, repository_url = j.do.rewriteGitRepoUrl(url=str(url), login=login, passwd=passwd)
        j.do.executeInteractive("cd %s;git remote set-url origin '%s'" % (path, repository_url))

    if opts.action == "update" and opts.deletechanges:
        print(("force update %s/%s/%s" % (provider, account, reponame)))
        cmd = 'cd %s; git checkout .' % path
        j.do.execute(cmd)
        j.do.pullGitRepo(url=client.remoteUrl,
                         branch=opts.branch,
                         revision=opts.revision,
                         tag=opts.tag,
                         ignorelocalchanges=True)
        continue

    if opts.action == "get":
        # cmd = "git config --global push.default matching"
        # j.do.execute(cmd)
        j.do.pullGitRepo(client.remoteUrl, dest=None, depth=None,
                         ignorelocalchanges=opts.deletechanges, reset=False, branch=opts.branch)
        continue

    # is dirty hack, am sure there are better ways (@TODO)
    if opts.action == "push":
        print(("push git repo:%s" % path))
        j.do.pushGitRepos(message=opts.message, name=reponame, update=True, provider=provider, account=account)

    nrmods = 0
    if opts.action in ['status', 'commit', 'update']:

        mods = client.getModifiedFiles()

        nrmods = len(mods["D"]) + len(mods["M"]) + len(mods["N"]) + len(mods["R"])

        if opts.onlychanges and nrmods == 0:
            continue

        # lrev,lid,provider,branch,user,msg,ddate=client.client.tip()
        branch = client.branchName

        if opts.branch is not None:
            if branch != opts.branch:
                print(("set branch:%s" % opts.branch))
                client.switchBranch(opts.branch, create=True)

        lrev = client.repo.head.commit.hexsha
        branch = client.branchName

        reposync = "?"
        remotelastrevision = "?"

        if nrmods > 0:
            reposync = "N"

        print ("%-15s %-25s %-10s n%-3s:m%-3s:d%-3s:r%-6s reposync:%-9s  lrev:%-9s rrev:%-5s" %
               (account, reponame, client.branchName, len(mods["N"]), len(mods["M"]), len(mods["D"]),
                len(mods["R"]), reposync, lrev, remotelastrevision))

    if opts.action in ['commit']:
        if nrmods == 0:
            print("no need to commit is in sync")
            continue

    # if opts.action in ['update']:
    #     if nrmods==0 and reposync=="Y":
    #         print "no need to update, repo is in sync"
    #         continue

    if opts.action in ['commit']:
        if nrmods == 0:
            print("no need to commit, no mods")
            continue

    if nrmods > 0:
        print("MODS:")
        for key, item in list(mods.items()):
            if len(item) > 0:
                print((" %s" % key))
                for subitem in item:
                    print(("    - %s" % (subitem)))

    if opts.action in ['commit', 'update']:
        if nrmods > 0:
            if opts.message is None:
                message = j.console.askString("commit message")
            else:
                message = opts.message

            print("ADD/REMOVE/COMMIT")
            client.commit(message=message, addremove=True)

    if opts.update or opts.action == 'update':
        print("PULL")
        j.do.pullGitRepo(url=client.remoteUrl, branch=opts.branch, revision=opts.revision, tag=opts.tag)
        # client.pull()


j.application.stop()
