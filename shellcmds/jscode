#!/usr/bin/env jspython

from JumpScale import j

from JumpScale.baselib import cmdutils
import JumpScale.baselib.git

import sys,time

j.application.start("jscode2")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['get','commit','push','update','status','list'], help='Command to perform')

parser.add_argument('-n','--name',help='name or partial name of repo, can also be comma separated, if not specified then will ask, if \'*\' then all.')
parser.add_argument('--url',help='url')

parser.add_argument('-m','--message',help='commit message',default="new")
parser.add_argument('-b','--branch',help='branch')

parser.add_argument('-a','--accounts',help='comma separated list of accounts, if not specified then will ask, if \'*\' then all.')

parser.add_argument('-u','--update',required=False, action='store_true',help='update merge before doing push or commit')

parser.add_argument('-f','--force',required=False, action='store_true',help='auto answer yes on every question')
parser.add_argument('-d','--deletechanges',required=False, action='store_true',help='will delete all changes when doing update')

parser.add_argument('-o','--onlychanges',required=False, action='store_true',help='will only do an action where modified files are found')


opts = parser.parse_args()

if opts.accounts==None and opts.name==None:
    if j.system.fs.exists("%s/%s"%(j.system.fs.getcwd(),".git")):
        #we are in repo
        opts.name=j.system.fs.getBaseName(j.system.fs.getcwd())
        opts.accounts=j.system.fs.getBaseName(j.system.fs.getParent(j.system.fs.getcwd()))


if opts.branch != None and opts.action in ['status']: 
    raise RuntimeError("Cannot specify branch when asking status")


def getRepos(account=None,name=None):
    result=[]
    if name==None:
        name=""
    if account==None:
        account=""
    accounttofind=account
    
    repos=[]
    for top in j.system.fs.listDirsInDir("/opt/code/", recursive=False, dirNameOnly=True, findDirectorySymlinks=True):
        for account in j.system.fs.listDirsInDir("/opt/code/%s"%top, recursive=False, dirNameOnly=True, findDirectorySymlinks=True):
            accountdir="/opt/code/%s/%s"%(top,account)
            if j.system.fs.exists(path="%s/.git"%accountdir):
                raise RuntimeError("there should be no .git at %s level"%accountdir)
            else:
                for reponame in j.system.fs.listDirsInDir("/opt/code/%s/%s"%(top,account), recursive=False, dirNameOnly=True, findDirectorySymlinks=True):
                    repodir="/opt/code/%s/%s/%s"%(top,account,reponame)
                    if j.system.fs.exists(path="%s/.git"%repodir):
                        if name.find("*")!=-1:
                            if name=="*" or reponame.startswith(name.replace("*","")):
                                repos.append([top,account,reponame,repodir])
                        elif name!="":
                            if reponame.lower().strip()==name.lower().strip():
                                repos.append([top,account,reponame,repodir])
                        else:
                            repos.append([top,account,reponame,repodir])


    accounts=[]
    for top,account,reponame,repodir in repos:
        if account not in accounts:
            if accounttofind.find("*")!=-1:
                if accounttofind=="*" or account.startswith(accounttofind.replace("*","")):
                    accounts.append(account)
            elif accounttofind!=None and accounttofind!="":
                if account.lower().strip()==accounttofind.lower().strip():
                    accounts.append(account)
            else:
                accounts.append(account)
    accounts.sort()


    if len(repos)>20 and accounttofind=='':
        print ("Select account to choose from, too many choices.")
        accounts=j.console.askChoiceMultiple(accounts)
        
    repos=[item for item in repos if item[1] in accounts]

    #only ask if * in name or name not specified
    if name.find("*")==-1 or name==None:
        repos=j.console.askArrayRow(repos)

    for top,account,reponame,repodir in repos:
        cl=j.clients.git.getClient(repodir)
        result.append((top,account,reponame,"unknown",cl,repodir))
    return result

repos=getRepos(opts.accounts,opts.name)


if opts.action == "status":
    print("\n\nSTATUS: account reponame                  branch added:modified:deleted   insyncwithremote?   localrev       remoterev")
    print("=========================================================================================================================")


for provider,account,reponame,branch,client,path in repos:

    if opts.action == "update" and opts.deletechanges:
        print(("force update %s/%s/%s"%(provider,account,reponame)))
        client.pull()
        client.update(force=True)
        continue

    if opts.action == "get":
        cmd="git config --global push.default matching"
        do.execute(cmd)
        do.pullGitRepo(opts.url,dest=None,depth=None,ignorelocalchanges=opts.deletechanges,reset=False,branch=opts.branch)
        continue

    #is dirty hack, am sure there are better ways (@TODO)
    if opts.action == "push":
        print(("push git repo:%s"%path))
        j.do.pushGitRepos(message=opts.message,name=reponame,update=True,provider=provider,account=account)
        # cmd="cd %s;git add . -A"%(path)
        # j.do.executeInteractive(cmd)
        # cmd="cd %s;git commit -m \"%s\""%(path,opts.message)
        # j.do.executeInteractive(cmd)
        # cmd="cd %s;git pull"%(path)
        # j.do.executeInteractive(cmd)
        # cmd="cd %s;git push"%(path)
        # j.do.executeInteractive(cmd)
        # continue

    if opts.action in ['status','commit','push','update']:

        mods=client.getModifiedFiles()

        nrmods= len(mods["D"])+len(mods["M"])+len(mods["N"])+len(mods["R"])

        if opts.onlychanges and nrmods==0:
            continue

        # lrev,lid,provider,branch,user,msg,ddate=client.client.tip()
        branch=client.branchName

        if opts.branch != None:
            if branch != opts.branch:
                print(("set branch:%s"%opts.branch))
                from IPython import embed
                print("DEBUG NOW not suported yet")
                embed()
                #@todo FIX !!!! URGENT
                cmd="cd %s;hg branch %s"%(path,opts.branch)
                j.system.process.execute(cmd,dieOnNonZeroExitCode=False, outputToStdout=True, useShell=True, ignoreErrorOutput=False)                
                cmd="cd %s;hg update %s"%(path,opts.branch)
                j.system.process.execute(cmd)
                print(("updated to branch:%s"%opts.branch))
                lrev,lid,ttype,branch,user,msg,ddate=client.client.tip()
                branch=client.getbranchname()


        # changesets=bitbucket.getChangeSets(reponame=reponame,limit=1)
        # if changesets.has_key("error"):
        #     print "could not process repo: %s %s error:%s"%(account,reponame,changesets["error"]["message"])
        #     # print changesets            
        #     continue
        # try:
        #     remotelastrevision=changesets["changesets"][0]["revision"]
        # except Exception,e:
        #     from IPython import embed
        #     print "DEBUG NOW jscode check error from changeset pull"
        #     embed()
            
        # rid=changesets["changesets"][0]["raw_node"] #remoteid

        # if lid==rid:
        #     reposync="Y"
        # else:
        #     reposync="N"

        reposync="?"
        lrev="?"
        remotelastrevision="?"

        if nrmods>0:
            reposync="N"            


        print(("%-15s %-25s %-10s n%-3s:m%-3s:d%-3s:r%-6s reposync:%-9s  lrev:%-9s rrev:%-5s" %(account,reponame,client.branchName,\
            len(mods["N"]),len(mods["M"]),len(mods["D"]),len(mods["R"]),\
            reposync,\
            lrev,remotelastrevision)))

    if opts.action in ['commit']:
        if nrmods==0:
            print("no need to commit is in sync")
            continue

    # if opts.action in ['update']:
    #     if nrmods==0 and reposync=="Y":
    #         print "no need to update, repo is in sync"
    #         continue

    if opts.action in ['commit']:        
        if nrmods==0:
            print("no need to commit, no mods")
            continue

    if nrmods>0:
        print("MODS:")
        for key,item in list(mods.items()):
            if len(item)>0:
                print((" %s"%key))
                for subitem in item:
                    print(("    - %s"%(subitem)))


    if opts.action in ['commit','push','update']:

        if nrmods>0:
            if opts.message==None:
                message=j.console.askString("commit message")    
            else:
                message=opts.message

            print("ADD/REMOVE/COMMIT")
            client.commit(message=message, addremove=True)

    if opts.update or opts.action =='update' or opts.action =='push':
        print("PULL")
        client.pull()
    
    if opts.action =='push':        
        print("PUSH")
        client.push()


j.application.stop()
