#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils

import sys,time

#rsync -azv install.jumpscale.org::download/test/jsbox/tools/jssync jsbox/tools/jssync

j.application.start("jssync")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['upload','download','sync2sb','sync2sbUpload'], help='Command to perform, sb means sandbox')

parser.add_argument("-c", '--category', help='what to sync2sb,upload,download options: all,allnocfg,jpackages,libs,libjs,cfg,base,installer (comma separated)', default="jpackages,libs")
parser.add_argument("-b", '--branch', help='branch of jumpscale, only required for sync2sb', default="unstable")
#parser.add_argument("-q",'--qualitylevel', help='qualitylevel of jpackages e.g. unstable,test,stable, only required for sync2sb', default="")
parser.add_argument("-k", '--key', help='secret key (can have ql inside or anything), only required for upload/download', default="")
parser.add_argument("-s", '--sbpath', help='sandbox path', default="/opt/jsbox2")
parser.add_argument("-j", '--jpdomains', help='specify add domains to look for when syncing/uploading jpackages.', default="")
parser.add_argument("-nd", help='no longer used.', default=True,action='store_true')
parser.add_argument("-d", '--delete', help='will delete files after upload or download.', default=False,action='store_true')

opts = parser.parse_args()

opts.qualitylevel="jpackages"

ipaddr=j.application.config.get("jssync.addr")

if opts.key=="":
    if not j.application.config.exists("jssync_key_default"):
        cmd="jpackage install -n jssync"
        j.system.process.executeWithoutPipe(cmd)
        print "PLEASE DO JSSYNC AGAIN."
        j.application.stop()
        
    opts.key=j.application.config.get("jssync_key_default")    

def getkey():
    if opts.key=="" :
        raise RuntimeError("specify key")
    return opts.key

def sync(src,dest,delete=True):
    print "SYNC: %s %s"%(src,dest)
    if delete:
        d="--delete-after "
    else:
        d="--max-delete=0 "
    cmd="rsync -Lrpo %s%s %s"%(d,src,dest)

    if not j.system.fs.exists(path="%s"%(src)):
        print "ERROR:could not find dir:%s"%(src)
        j.application.stop(1)

    j.system.process.executeWithoutPipe(cmd)

def download(category,path="",data=False,deleteFirst=False):
    print "DOWNLOAD: %s %s"%(category,path)
    key=getkey()
    category=category.strip("/")
    path=path.strip("/")
    path="/%s/"%path

    if data:
        base="%s_data"%(opts.sbpath)
        category="%s_data"%(category)
    else:
        base=opts.sbpath

    pathfs="%s%s"%(base,path)
    if deleteFirst:
        j.system.fs.removeDirTree(pathfs)


    cmd="rsync -azv %s::download/%s/%s%s %s  --modify-window=60 --compress"%(ipaddr,\
        key,category,path,pathfs)
    if opts.delete:
        cmd+=" --delete-after"
    print cmd
    j.system.process.executeWithoutPipe(cmd)    

def createdir(path):
    # 
    
    order=[]
    order.insert(0,path)
    while path[-7:]<>":upload":
        path=j.system.fs.getParent(path)
        order.insert(0,path)

    j.system.fs.createDir("/tmp/empty")
    # j.system.fs.writeFile(filename="/tmp/empty/_empty",contents=".")

    order.pop(0)
    for item in order:
        if item[-1]<>"/":
            item+="/"
        cmd="rsync /tmp/empty/ %s"%item
        j.system.process.execute(cmd)

def getUserPasswd():
    return j.application.config.get("jssync.login"),j.application.config.get("jssync.passwd")    

def uploadfile(category,path="",data=False):
    print "UPLOAD: %s %s"%(category,path)
    key=getkey()

    path=path.strip("/")
    category=category.strip("/")
    base=opts.sbpath
    pathfs="%s/%s"%(base,path)

    user,passwd=getUserPasswd()
    cmd="export RSYNC_PASSWORD=%s;rsync -azvPh %s %s@%s::upload/%s/%s/%s --delete-after --modify-window=60 --progress  "%(passwd,pathfs,user,\
        ipaddr,key,category,path)
    print cmd
    j.system.process.execute(cmd)    
    
def upload(category,path="",data=False):
    print "UPLOAD: %s %s"%(category,path)
    key=getkey()

    category=category.strip("/")
    path=path.strip("/")
    path="/%s/"%path

    if data:
        base="%s_data"%(opts.sbpath)
        category="%s_data"%(category)
    else:
        base=opts.sbpath

    pathfs="%s%s"%(base,path)

    if not data and j.system.fs.isDir(pathfs):
        j.system.fs.removeIrrelevantFiles(pathfs)

    user,passwd=getUserPasswd()
    cmd="export RSYNC_PASSWORD=%s;rsync -azvPh %s %s@%s::upload/%s/%s%s --delete-after --modify-window=60 --progress  "%(passwd,pathfs,user,\
        ipaddr,key,category,path)
    for i in range(100):
        try:
            print cmd
            j.system.process.execute(cmd)    
            return
        except Exception,e:
            if str(e).find("No such file or directory")<>-1:
                createdir("%s::upload/%s/%s%s"%(ipaddr,key,category,path))            
            print "error in sync:%s"%e
            print "RETRY"

def finddomain(name):
    for provider in j.system.fs.listDirsInDir("/opt/code/"):
        for cat in j.system.fs.listDirsInDir(provider, recursive=False, findDirectorySymlinks=True):
            for dname in j.system.fs.listDirsInDir(cat, recursive=False, dirNameOnly=True, findDirectorySymlinks=True):
                if dname.find("jp_")<>-1:
                    dname2=dname.split("jp_",1)[1]
                    if dname2.lower().strip()==name.lower().strip():
                        return "%s/%s"%(cat,dname)
    raise RuntimeError("could not find domain for name:'%s'"%name)

opts.category=opts.category.split(",")
opts.category=[item.lower().strip() for item in opts.category]
opts.action=opts.action.lower()

def checkcat(cat,cfg=False):
    if cat in opts.category:
        return True
    if "all" in opts.category:
        return True
    if cfg==False and ("allnocfg" in opts.category):
        return True
    return False


#COPY FROM SYSTEM TO SANDBOX JPACKAGES
if opts.action.find('sync2sb')==0 and checkcat("jpackages"):
    if opts.qualitylevel=="":
        raise RuntimeError("quality level needs to be specified")

    j.system.fs.removeDirTree("%s/jpackages/"%opts.sbpath)
    j.system.fs.createDir("%s/jpackages/"%opts.sbpath)

    doms=opts.jpdomains.split(",")
    for item in ["jumpscale","serverapps","desktop"]:
        if item<>None or item.strip()<>"":
            if item not in doms:
                doms.append(item)

    for dom in doms:
        if dom.strip()<>"":
            path=finddomain(dom)
            # print "JPACKAGEDOM:%s"%path
            sync("%s/%s/"%(path,opts.qualitylevel),"%s/jpackages/%s/"%(opts.sbpath,dom))

            dpath=j.system.fs.joinPaths(opts.sbpath,"jpackages",dom)
            for path in j.system.fs.listFilesInDir(dpath,True,"main.hrd"):
                hrd=j.core.hrd.getHRD(path)
                hrd.set("jp.debug",0)
                
#COPY FROM SYSTEM TO SANDBOX for LIBS
if opts.action.find('sync2sb')==0 and checkcat("libs"):
    if opts.branch=="":
        raise RuntimeError("branch name needs to be specified")

    j.system.fs.createDir("%s/apps/"%opts.sbpath)    

    # j.system.fs.removeDirTree("%s/libjs/JumpScale/"%opts.sbpath)
    j.system.fs.createDir("%s/libjs/JumpScale/"%opts.sbpath)    

    for item in ["base","baselib","core"]:
        sync("/opt/code/github/jumpscale/jumpscale_core/lib/JumpScale/%s/"%(item),"%s/libjs/JumpScale/%s/"%(opts.sbpath,item))
    item="grid"
    sync("/opt/code/github/jumpscale/jumpscale_core/lib/JumpScale/%s/"%(item),"%s/libjs/JumpScale/%s/"%(opts.sbpath,item))
    item="lib"
    sync("/opt/code/github/jumpscale/jumpscale_core/lib/JumpScale/%s/"%(item),"%s/libjs/JumpScale/%s/"%(opts.sbpath,item))

    # #grid apps
    # sync("/opt/code/github/jumpscale/jumpscale_core/apps/agent/","%s/apps/agent/"%opts.sbpath)
    # sync("/opt/code/github/jumpscale/jumpscale_core/apps/blobserver/","%s/apps/blobserver/"%opts.sbpath)
    # sync("/opt/code/github/jumpscale/jumpscale_core/apps/processmanager/","%s/apps/processmanager/"%opts.sbpath)
    sync("/opt/code/github/jumpscale/jumpscale_core/apps/jsagent/","%s/apps/jsagent/"%opts.sbpath)

    #tools
    sync("/opt/code/github/jumpscale/jumpscale_core/jsbox/tools/","%s/tools/"%opts.sbpath)
    sync("/opt/code/github/jumpscale/jumpscale_core/shellcmds/","%s/tools/"%opts.sbpath,delete=False)
    sync("/opt/code/github/jumpscale/jumpscale_core/jsbox/libjs/","%s/libjs/"%opts.sbpath,delete=False)
    sync("/opt/code/github/jumpscale/jumpscale_core/jsbox/activate","%s/activate"%opts.sbpath,delete=False)


#COPY FROM SYSTEM TO SANDBOX for CFG
if opts.action.find('sync2sb')==0 and checkcat("cfg",True):
    if opts.branch=="":
        raise RuntimeError("branch name needs to be specified")
    print "cfg to sandbox"
    cfgdir="%s_data/cfg/"%opts.sbpath
    j.system.fs.removeDirTree(cfgdir)
    j.system.fs.createDir(cfgdir)

    sync("/opt/code/jumpscale/%s__jumpscale_core/jsbox/cfg/"%opts.branch,cfgdir,delete=False)

if opts.action.find('sync2sb')==0 and checkcat("base"):
    # cmd='jpackage download -n base'
    # j.system.process.executeWithoutPipe(cmd)
    src="$vardir/jpackages/files/jumpscale/base/2.7/linux64/base/"
    src=j.dirs.replaceTxtDirVars(src)
    sync("%s/lib/"%src,"%s/lib/"%opts.sbpath,delete=True)
    sync("%s/bin/"%src,"%s/bin/"%opts.sbpath,delete=True)
    # sync("%s/apps/redis/"%src,"%s/apps/redis/"%opts.sbpath,delete=True)


#cleanup
if opts.action.find("upload")<>-1:
    j.system.fs.removeDirTree("%s/apps/redis"%(opts.sbpath))
    j.system.fs.removeDirTree("%s/libext/raven"%(opts.sbpath))
    j.system.fs.removeDirTree("%s/libext/raven-4.0.3.egg-info"%(opts.sbpath))
    j.system.fs.removeDirTree("%s/libjs/JumpScale/portal/"%(opts.sbpath))
    for item in ["flask_bootstrap","lxml"]:
        j.system.fs.removeDirTree("%s/libjs/lib/%s/"%(opts.sbpath,item))

#UPLOAD JPACKAGES
if opts.action.find("upload")<>-1 and checkcat("jpackages"):
    upload("jsbox","jpackages")

if opts.action.find("upload")<>-1 and checkcat("cfg",True):
    upload("jsbox","cfg",data=True)

if opts.action=="upload" and checkcat("installer"):    
    path="/opt/code/github/jumpscale/jumpscale_core/jsbox/installers/"
    user,passwd=getUserPasswd()
    cmd="export RSYNC_PASSWORD=%s;rsync -azvPh %s %s@%s::www/cmds/ --modify-window=60 --progress  "%(passwd,path,user,ipaddr)
    print cmd
    j.system.process.executeWithoutPipe(cmd)   

if opts.action.find("upload")<>-1 and checkcat("libs"):
    uploadfile("jsbox","activate")
    upload("jsbox","libjs")
    # upload("jsbox","libjs/JumpScale/base")
    # upload("jsbox","libjs/JumpScale/baselib")
    # upload("jsbox","libjs/JumpScale/core")
    # upload("jsbox","libjs/JumpScale/grid")
    # upload("jsbox","libjs/JumpScale/lib")
    upload("jsbox","libext")
    upload("jsbox","apps/jsagent")
    # upload("jsbox","apps/agent")
    # upload("jsbox","apps/blobserver")
    # upload("jsbox","apps/processmanager")
    upload("jsbox","tools")

if opts.action.find("upload")<>-1 and checkcat("base"):  
    # upload("jsbox","apps/redis")
    upload("jsbox","lib")
    upload("jsbox","bin")


#################################
#DOWNLOAD

if opts.action=="download" and checkcat("base"):
    # download("jsbox","apps/redis")
    download("jsbox","lib")
    download("jsbox","bin")

if opts.action=="download" and checkcat("jpackages"):
    download("jsbox","jpackages")#,deleteFirst=True)    #@todo is bad hack because syncing does not work as expected 

if opts.action=="download" and checkcat("libjs"):
    download("jsbox","libjs/JumpScale/base")
    download("jsbox","libjs/JumpScale/baselib")
    download("jsbox","libjs/JumpScale/core")
    download("jsbox","libjs/JumpScale/grid")
    download("jsbox","libjs/JumpScale/lib")
    download("jsbox","tools")

if opts.action=="download" and checkcat("libs"):
    download("jsbox","libjs/JumpScale/base")
    download("jsbox","libjs/JumpScale/baselib")
    download("jsbox","libjs/JumpScale/core")
    download("jsbox","libjs/JumpScale/grid")
    download("jsbox","libjs/JumpScale/lib")
    # download("jsbox","libext")
    j.system.fs.createDir("%s/libext/"%opts.sbpath)
    download("jsbox","apps/agent")
    download("jsbox","apps/blobserver")
    download("jsbox","apps/processmanager")
    download("jsbox","tools")

if opts.action=="download" and checkcat("cfg",True):
    download("jsbox","cfg",data=True) 


j.application.stop()
