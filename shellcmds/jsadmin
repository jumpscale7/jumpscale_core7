#!/usr/bin/env python

from JumpScale import j

j.application.appname = "jumpscale:jsadmin"
j.application.start()

from JumpScale.baselib import cmdutils

import sys

parser = cmdutils.ArgumentParser()

commands = ['applyconfig','createidentity','config2gridmaster','sshfs','sshfsoff','listnodes','kill','print','deployssh']

parser.add_argument("action", choices=commands, help='Command to perform')

group = parser.add_argument_group(title="all")
group.add_argument('--runid', required=False, type=str, default="", help='Give run a specific id.')
# group.add_argument('-r', '--remote', help='Ip address of node',default="")
# group.add_argument('-l', '--local', action='store_true', help='To execute locally.')
group.add_argument('-p', '--passwd', help='Root password to use, if any.',default="")

group = parser.add_argument_group(title="sshfs")
# group.add_argument('-c', '--cfgname', help='Name of cfg directory.',default="")
# group.add_argument('-e', '--extra', help='Extra config data in tag format e.g. cpasswd:123,myname:kds ',default="")
# group.add_argument('-t','--type', help='Type of action (platform,core,configure,grid), is comma separated.',default="platform,core,configure,grid,clean")
# group.add_argument('-q','--quiet', required=False, action='store_true', help='Put in quiet mode')
# group.add_argument('-n','--name',required=False, help='Name of jpackage to be installed')
group.add_argument('-r', '--remote', help='hostname of node or ipaddr',default="")
group.add_argument('-o','--gridname',required=False, help='Name of grid.',default="")
# group.add_argument('-d','--domain',required=False, help='Name of jpackage domain to be installed')
# group.add_argument('-v','--version',required=False, help='Version of jpackage to be installed')
# group.add_argument('--deps', required=False, action='store_true', help='do on dependencies e.g. install, update, ...')
# group.add_argument('-f','--force',required=False, action='store_true',help='auto answer yes on every question and redo even if already done')

# parser.add_argument('-g',  action='store_true', required=False, help='Apply on all active nodes on grid')
# parser.add_argument('--roles', required=False, help='Used with -g. Apply on active nodes that have these roles. ex: --roles=node, computenode.kvm(note the = sign). List is comma seperated')
# parser.add_argument('-t','--timeout', required=False, type=int, default=0, help='Time to wait to if connection is not available')

args = parser.parse_args()
args.local=False
args.g=False

do=j.system.process.executeWithoutPipe

import JumpScale.baselib.remote
import JumpScale.baselib.admin

admin=j.tools.admin.get(args)
j.admin=admin

if args.action == "createidentity":
    admin.createidentity()

elif args.action == "config2gridmaster":
    admin.config2gridmaster()
elif args.action == "print":
    admin.printResult()

elif args.action == "kill":
    j.system.process.killProcessByName("jsexec")
    j.system.process.killProcessByName("jsadmin")

elif args.action == "listnodes":
    admin.loadNodes(pprint=True)    

elif args.action == "sshfs":
    if args.remote<>"":
        if args.gridname=="":
            raise RuntimeError("need to specify gridname")
    admin.sshfs(args.gridname,args.remote)
elif args.action == "sshfsoff":
    if args.remote<>"":
        if args.gridname=="":
            raise RuntimeError("need to specify gridname")
    admin.sshfsumount(args.gridname,args.remote)

elif args.action == "deployssh":
    if args.remote=="":
        j.events.inputerror_critical("please specify remote server with -r")
    if args.passwd=="":
        j.events.inputerror_critical("please specify passwd with -p")        
    admin.deployssh()#args.gridname,args.remote)


elif args.action == "applyconfig":
    admin.applyconfiglocal()


j.application.stop()


