#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils
import JumpScale.lib.kvm

j.application.start("jskvm")

parser = cmdutils.ArgumentParser()
#'mountdisks','unmountdisks'
parser.add_argument("action", choices=['create', 'list', 'list_images', 'init_network', 'list_snapshots', 'info', 'destroy', 'destroy_all', 'start', 'stop', 'restart', 'snapshot', 'delete_snapshot', 'execute'], help='Command to perform')
parser.add_argument("-n", '--name', help='machine name')
parser.add_argument("-b", '--base', help='base to clone from')
parser.add_argument("-r", '--replace', help='will replace the vm if exists', default=True)
parser.add_argument('-m', '--mem', help='max mem in MB', default=512)
parser.add_argument('-s', '--size', help='disk size in GB', default=10)
parser.add_argument('-d', '--description', help='vmachine description')
parser.add_argument('-p', '--vcpu', help='cpu count', default=1)
parser.add_argument("-c", '--cmd', help='cmd to execute')
parser.add_argument("-a", '--pubip', help='set pub ip addr of machine (192.168.1.207/24)', default='')
parser.add_argument("-g", '--gw', help='set ip gateway of machine (192.168.1.1)', default='')
parser.add_argument("-i", '--pubiface', help='public interface', default='eth0')


opts = parser.parse_args()

kvm = j.system.platform.kvm

############create
if opts.action == 'create':
    if not opts.name:
        raise RuntimeError("specify machine name")
    if not opts.base:
        raise RuntimeError("specify image name")
    if opts.base not in kvm.images:
        raise RuntimeError("image does not exist")
    kvm.create(opts.name, opts.base, opts.replace, opts.description, opts.size, opts.mem, opts.vcpu)

##########list
if opts.action == 'list':
    running, stopped = kvm.list()
    print("## running:")
    for item in running:
        print("  machine: %-25s %s" % (item['name'], kvm.getIp(item['name'])))
    print("## stopped:")
    for item in stopped:
        print("  machine: %-25s %s" % (item['name'], kvm.getIp(item['name'])))

##########init_network
if opts.action == 'init_network':
    if not opts.pubiface:
        raise RuntimeError('public iface must be specified')
    kvm.initPhysicalBridges(opts.pubiface)
    kvm.initLibvirtNetwork()

##########list_images
if opts.action == 'list_images':
    print("## images:")
    for image_name, image_hrd in kvm.images.iteritems():
        print("  image: %-25s %s" % (image_name, image_hrd.get('ostype')))

##########list_snapshots
if opts.action == 'list_snapshots':
    if not opts.name:
        raise RuntimeError("specify machine name")
    for snapshot in kvm.listSnapshots(opts.name):
        print(snapshot)
    else:
        print('vmachine %s does not have snapshots' % opts.name)

##########info
if opts.action == 'info':
    if not opts.name:
        raise RuntimeError("specify machine name")
    config = kvm.getConfig(opts.name)
    if config:
        print('Name: %s\nBase image: %s\nID: %s\nIP address: %s\nMemory: %s MB\nDisk size: %s GB\n' % (config.get('name'), 
              config.get('image'), config.get('id'), config.get('bootstrap.ip'), 
              config.get('memory'), config.get('disk_size')))

# if opts.action =='rdp':
#     if opts.name==None:
#         raise RuntimeError("specify machine name")    
#     if ip=="":
#         ip=getip(opts.nr)
#     time.sleep(2)    
#     j.system.net.waitConnectionTest(ip,3389,2)
#     j.system.installtools.execute("rmachine %s -g 1600x900 -e & 2>&1 > /dev/null"%ip)

if opts.action == 'destroy_all':
    if j.console.askYesNo('Are you sure you want to destroy all vmachines?'):
        kvm.destroyAll()
    else:
        print('Rolled back')

if opts.action == 'destroy':
    if not opts.name:
        raise RuntimeError("specify machine name")
    kvm.destroy(opts.name)

if opts.action == 'stop':
    if not opts.name:
        raise RuntimeError("specify machine name")
    kvm.stop(opts.name)

if opts.action == 'start':
    if not opts.name:
        raise RuntimeError("specify machine name")
    kvm.start(opts.name)

if opts.action == 'restart':
    if not opts.name:
        raise RuntimeError("specify machine name")
    kvm.stop(opts.name)
    kvm.start(opts.name)

j.application.stop()