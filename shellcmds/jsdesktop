#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils

import sys,time

j.application.start("jsprocess_start")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['ps','new','list','killall','delete','configure','rdp','userconfig'], help='Command to perform')
parser.add_argument("-n", '--name', help='desktop nr or name')
parser.add_argument("-d", '--desktop', action='store_true', help='opendesktop')
parser.add_argument("-p",'--passwd', help='password for desktop')

ip=""

def getChildren(pid,children):
    process=j.system.process.getProcessObject(pid)
    children.append(process)
    for child in process.get_children():
        children=getChildren(child.pid,children)
    return children

def llist():
    cmd="lxc-list"
    resultcode,out=j.system.process.execute(cmd)

    stopped = []
    running = []
    current = None
    for line in out.split("\n"):
        line = line.strip()
        if line.find('RUNNING')<>-1:
            current = running
        elif line.find('STOPPED')<>-1:
            current = stopped
        else:
            continue
        name=line.split(" ")[0]
        if name.find("desktop")==0:
            name=name.replace("desktop","")
            current.append(int(name))
    running.sort()
    stopped.sort()
    return running,stopped

def getip(nr,fail=True):
    cmd="lxc-list"
    resultcode,out=j.system.process.execute(cmd)
    name="desktop%s"%nr
    stopped = []
    running = []
    current = None
    for line in out.split("\n"):
        line = line.strip()
        if line.find(name)==0:
            print "machine found"
            if line.find("RUNNING")==-1:                
                if fail:
                    print "machine not running,so ip could not be found"
                    j.application.stop(1)
                else:
                    return ""
            print "machine running"
            line=line.split("RUNNING")[1]
            ip=line.split("-")[0].strip()
            return ip
    if fail:
        print "machine %s not found"%name
        j.application.stop(1)
    else:
        return ""

def getpid(nr,fail=True):
    resultcode,out=j.system.process.execute("lxc-info -n desktop%s"%nr)
    state=None
    pid=0
    for line in out.split("\n"):
        line=line.strip().lower()
        if line=="":
            continue
        if line.find("state")==0:
            state=line.split(":")[1].strip()
        if state=="running" and line.find("pid")==0:
            pid=int(line.split(":")[1].strip())
    if pid==0:
        print "desktop:%s is not running"%opts.nr
        if fail:
            j.application.stop(1)
        else:
            return 0
    return pid



opts = parser.parse_args()

############PS
if opts.action =='ps':
    pid = getpid(opts.nr)
    children=[]
    children=getChildren(pid,children)

    pre=""
    mem=0.0
    cpu=0.0
    cpu0=0.0
    prevparent=""
    for child in children:
        if child.parent.name<>prevparent:
            pre+=".."
            prevparent=child.parent.name
        # cpu0=child.get_cpu_percent()
        mem0=int(round(child.get_memory_info().rss/1024,0))
        mem+=mem0
        cpu+=cpu0
        print "%s%-35s %-5s mem:%-8s" % (pre,child.name, child.pid, mem0)
    cpu=children[0].get_cpu_percent()
    print "TOTAL: mem:%-8s cpu:%-8s" % (mem, cpu)


    


##########NEW
if opts.action =='list':
    running,stopped=llist()
    print "## running:"
    for item in running:
        print "  desktop: %s"%item
    print "## stopped:"
    for item in stopped:
        print "  desktop: %s"%item


if opts.action =='new':
    running,stopped=llist()
    desktops=running+stopped
    m=0#max
    for nr in desktops:
        if nr>m:
            m=nr
    m=m+1
    name="desktop%s"%(m)
    cmd="lxc-clone --snapshot -B overlayfs -o base -n %s"%name
    resultcode,out=j.system.process.execute(cmd)
    cmd="lxc-start -d -n %s"%name
    resultcode,out=j.system.process.execute(cmd)
    start=time.time()
    now=start
    while now<start+10:    
        ip=getip(m,fail=False)
        if ip<>"":
            break
        time.sleep(0.2)
        now=time.time()
    if ip=="":
        print "could not create new desktop, ipaddress not found."
        j.application.stop(1)
    opts.action="configure"
    print "ip:%s"%ip

if opts.action =='configure':
    if ip=="":
        ip=getip(opts.nr)
    import JumpScale.baselib.remote

    # #this will make sure new password is set
    # seedpasswd="rooter"
    cl=j.tools.expect.new("sh")

    if opts.passwd==None:
        opts.passwd="rooter"
    

    if j.system.net.waitConnectionTest(ip,22,5)==False:
        print "could not connect to port:%s on ip:%s"%(22,ip)
        j.application.stop(1)

    cl.login(remote=ip,passwd=opts.passwd,seedpasswd="",initial=True)

    cl.send("/etc/init.d/xrdp start")

    #cl.wait()

    nr=0
    
    if j.system.net.waitConnectionTest(ip,3389,0.1)==False:
        if nr==10:
            print "could not connect to rdp port:%s on ip:%s"%(3389,ip)
            j.application.stop(1)            
        nr+=1

    print "desktop:%s:%s:started"%(nr,ip)

if opts.desktop==True or opts.action =='rdp':
    if ip=="":
        ip=getip(opts.nr)
    time.sleep(2)    
    j.system.net.waitConnectionTest(ip,3389,2)
    j.system.installtools.execute("rdesktop %s -g 1600x900 -e & 2>&1 > /dev/null"%ip)


if opts.action =='killall':
    running,stopped=llist()
    alll=running+stopped
    for item in alll:
        cmd="lxc-destroy -n desktop%s -f"%item
        resultcode,out=j.system.process.execute(cmd)

if opts.action =='del':
    cmd="lxc-destroy -n desktop%s -f"%opts.nr
    resultcode,out=j.system.process.execute(cmd)

if opts.action =='userconfig':
    if opts.name==None:
        raise RuntimeError("please specify name")
    if opts.passwd==None:
        raise RuntimeError("please specify passwd")        
    import JumpScale.grid.agentcontroller
    client=j.clients.agentcontroller
    client.execute("jumpscale", "desktopcreate", "master", timeout=60, wait=True, lock='desktopcreate', username=opts.name,passwd=opts.passwd)


j.application.stop()
