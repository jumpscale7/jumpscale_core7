#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils
import os

try:
    import ujson as json
except:
    import json

import sys,time

j.application.start("jsgrid")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['healthcheck', 'purgeall', 'purgelogs', 'purgejobs', \
        'purgeecos', 'restartprocessmgrs', 'reloadjumpscripts','resetlocks', 'restartworkers'],
    help='Command to perform')
# parser.add_argument("-n", '--nr', help='desktop nr')
# parser.add_argument("-d", '--desktop', action='store_true', help='opendesktop')
# parser.add_argument('--passwd', help='password for desktop')

parser.add_argument('--force',required=False, action='store_true',help='dont ask yes, do immediate')
parser.add_argument('--debug',required=False, action='store_true',help='will stop on errors and show all relevant info')
parser.add_argument('--from', dest='ffrom', required=False, type=str, help='used with purgelogs, ex: --from=-2h, --from=-2d (note the = sign)')
parser.add_argument('--to', required=False, type=str, help='used with purgelogs, ex: --to=-1h, --to=-1d (note the = sign)')
parser.add_argument('-nid', '--nodeid', dest='nid', required=False, type=int, help='Used with healtcheck')
parser.add_argument('--roles', dest='roles', required=False, type=str, help='Used with setroles or deleterole. ex: -roles=node, computenode.kvm(note the = sign). List is comma seperated')


#check redis is there if not try to start
if not j.clients.redis.isRunning('system'):
    raise RuntimeError("System redis is not installed")


opts = parser.parse_args()


############PS

if opts.action =='resetlocks':
    LOCKPATH = os.path.join(j.dirs.tmpDir, 'locks')
    j.system.fs.removeDirTree(LOCKPATH)

    j.tools.startupmanager.startAll()

    j.system.process.executeWithoutPipe("jsuser add -d admin:admin:admin::")

    print("has set user admin with passwd admin, please change using command 'jsuser' if required.")

#################HEALTHCHECK
if opts.action == 'healthcheck':
    import JumpScale.grid.gridhealthchecker
    if not opts.nid:
        j.core.grid.healthchecker.runAll()
    else:
        j.core.grid.healthchecker.runAllOnNode(opts.nid)


if opts.action == 'restartprocessmgrs':
    import JumpScale.grid.agentcontroller
    ac=j.clients.agentcontroller.get()
    ac.restartProcessmanagerWorkers()

if opts.action == 'restartworkers':
    import JumpScale.baselib.redis
    rcl = j.clients.redis.getByInstance('system')
    for proc in j.tools.startupmanager.getProcessDefs('workers'):
        for num in range(1, proc.numprocesses +1):
            name = "%s_%s" % (proc.name, num)
            print("Sending command to %s" % name)
            rcl.set("workers:action:%s" % name,"STOP")

if opts.action == 'reloadjumpscripts':
    import JumpScale.grid.jumpscripts
    import JumpScale.grid.agentcontroller
    ac=j.clients.agentcontroller.get()
    ac.reloadjumpscripts()

# if opts.action == 'restartWorkers':
#     import JumpScale.grid.agentcontroller
#     ac=j.clients.agentcontroller.get()
#     ac.restartWorkers()


#################PURGELOGS


def purge(opts,action):

    def _getEpoch(time):
        if not time:
            return time
        if isinstance(time, int):
            return time
        if time.startswith('-'):
            return j.base.time.getEpochAgo(time)
        return j.base.time.getEpochFuture(time)

    query = dict()

        
    if action in ['purgejobs']:
        timeElement='timeStart'
    else:
        timeElement='epoch'
    
    if opts.ffrom:
        query[timeElement] = {'$gt': int(_getEpoch(opts.ffrom))}
    
    if opts.to==None:
        opts.to="-4h"

    if opts.to:
        query[timeElement] = {'$lt': int(_getEpoch(opts.to))}


    # print queryfull

    if query:
        if action in ['purgelogs']:
            table = 'log'
        elif action in ['purgejobs']:
            table ='system_job'
        elif action in ['purgeecos']:
            table='eco'

        import JumpScale.grid
        scl = j.clients.osis.getNamespace('system')
        db = getattr(scl, table)
        print query
        print 'Deleted %s' % db.deleteSearch(query)


if opts.action in ['purgeall','purgelogs','purgejobs', 'purgeecos']:
    if opts.action=="purgeall":
        opts.to="+1h"
        purge(opts,'purgelogs')
        purge(opts,'purgejobs')
        purge(opts,'purgeecos')
    else:
        purge(opts,opts.action)


j.application.stop()
