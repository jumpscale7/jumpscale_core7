#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.baselib import cmdutils

j.application.start("jsprocess")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['logs', 'attach', 'list', 'status', 'start', 'stop', 'restart', 'disable', 'enable'], help='Command to perform')
parser.add_argument("-n", '--name', help='Process name')
parser.add_argument("-d", '--domain', help='Process domain')
parser.add_argument("-i", '--interactive', action='store_true', help='Ask for processes interactively')
parser.add_argument("-c", '--carefull', action='store_true', default=False, help='Check each startup status, die if one could not start.')

FORMAT = "%-20s %-20s %-10s %-12s %-10s %-1s %-2s %-15s %s"

opts = parser.parse_args()
if opts.action in ('list', 'status'):
    print FORMAT % ('DOMAIN', 'NAME', 'PRIORITY', 'STATUS', 'AUTOSTART','S','#','PIDS','PORTS')
    print '-'* 100
    print

if opts.domain==None and  opts.name==None and  opts.action=="start" and not opts.carefull:
    j.tools.startupmanager.startAll()
    j.application.stop(0)

if opts.action in ['disable','enable','stop','start','restart']:
    pds = j.tools.startupmanager.getProcessDefs(opts.domain, opts.name,system=False)
    if opts.interactive and j.application.shellconfig.interactive:
        choicearray=[]
        pdsDict={}
        for pd in pds:
            key="%s_%s"%(pd.domain,pd.name)
            choicearray.append(key)
            pdsDict[key]=pd

        pds=[]
        res=j.console.askChoiceMultiple( choicearray, descr="choose processes to %s"%opts.action, sort=True)
        for key in res:
            pd=pdsDict[key]
            pds.append(pd)

else:
    pds = j.tools.startupmanager.getProcessDefs(opts.domain, opts.name,system=True)


pds_rev = sorted(pds, key=lambda x: x.priority, reverse=True)
pds = sorted(pds, key=lambda x: x.priority, reverse=False)

if opts.action == 'disable':
    #make sure is stopped first
    for pd in pds_rev:
        print "disable: %s"%pd
        j.tools.startupmanager.stopProcess(pd.domain, pd.name)
        j.tools.startupmanager.disableProcess(pd.domain, pd.name)            
    j.application.stop(0)


if opts.action == 'enable':
    for pd in pds:
        print "enable: %s"%pd
        j.tools.startupmanager.enableProcess(pd.domain, pd.name)
        # j.tools.startupmanager.startProcess(pd.domain, pd.name)
    j.application.stop(0)

# single process commands
if opts.action in ('attach', 'logs'):
    if len(pds) != 1:
        print 'Could not find exactly one running process %s %s' % (opts.domain, opts.name)
        j.application.stop(1)
    elif opts.action == 'attach':
        j.system.platform.screen.attachSession(pds[0].domain, pds[0].name)
    elif opts.action == 'logs':
        pds[0].showLogs()
    j.application.stop(0)


#@todo does not work on all jpackages
if opts.action == 'restart':
    pds_rev = sorted(pds, key=lambda x: x.priority, reverse=True)
    for pd in pds_rev:
        if pd.system==False:
            print "restart: %s"%pd
            pd.stop()
    pds_sort = sorted(pds, key=lambda x: x.priority)
    for pd in pds_sort:
        if pd.system == False:
            pd.start()
    j.application.stop(0)

# commands applying on list of processes
if opts.action == 'stop':
    pds_rev = sorted(pds, key=lambda x: x.priority, reverse=True)
    for pd in pds_rev:
        if pd.system==False:
            print "stop: %s"%pd
            pd.stop()
    j.application.stop(0)


# commands applying on list of processes
if opts.action == 'start':
    pds_rev = sorted(pds, key=lambda x: x.priority)
    for pd in pds_rev:
        if pd.system==False:
            print "start: %s"%pd
            pd.start()
    j.application.stop(0)


for pd in pds:
    if pd.name=="jsprocess":
        continue
    if opts.action in ('status','list'):
        status = ''
        active = 'enabled' if pd.autostart else 'disabled'
        status = 'RUNNING' if pd.isRunning() else 'HALTED'

        if len(pd.pids)>0 and pd.numprocesses<>len(pd.pids):
            status = 'INCOMPLETE'

        if pd.pids==[]:
            pd.getPids()

        pids=[str(item) for item in pd.pids ]
        pids=",".join(pids)

        if pd.system:
            syst="S"
        else:
            syst=" "

        ports =",".join([ str(port) for port in pd.ports ])
        print FORMAT % (pd.domain, pd.name, pd.priority, status, active,syst,pd.numprocesses,pids,ports)
    else:
        getattr(pd, opts.action)()

j.application.stop()
