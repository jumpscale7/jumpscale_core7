#!/usr/bin/env jspython
from JumpScale import j

from JumpScale.baselib import cmdutils

import JumpScale.baselib.bitbucket
import JumpScale.baselib.mercurial

import sys,time

j.application.start("jstest")

if j.application.sandbox:
    raise RuntimeError("Cannot use jscode in sandboxed mode, is not supported, install in development mode.")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['commit','push','update','status'], help='Command to perform')

parser.add_argument('-m','--message',help='commit message')
parser.add_argument('-b','--branch',help='branch')

parser.add_argument('-a','--accounts',help='comma separated list of accounts, * is all')
parser.add_argument('-r','--repos',help='comma separated list of repos, will look for the accounts')

parser.add_argument('-u','--update',required=False, action='store_true',help='update merge before doing push or commit')

parser.add_argument('-f','--force',required=False, action='store_true',help='auto answer yes on every question')
parser.add_argument('-d','--deletechanges',required=False, action='store_true',help='will delete all changes when doing update')


# parser.add_argument('-m','--message',required=False, action='store_true',help='commit message')

opts = parser.parse_args()

if opts.accounts==None and opts.repos==None:
    if j.system.fs.exists("%s/%s"%(j.system.fs.getcwd(),".hg")):
        #we are in repo
        opts.repos=j.system.fs.getBaseName(j.system.fs.getcwd())
        opts.accounts=j.system.fs.getBaseName(j.system.fs.getParent(j.system.fs.getcwd()))


if opts.branch<>None and opts.action in ['status']: 
    raise RuntimeError("Cannot specify branch when asking status")

def getRepos():
    result=[]

    if opts.accounts=="*":
        accounts=j.system.fs.listDirsInDir("/opt/code", recursive=False, dirNameOnly=True, findDirectorySymlinks=True)
    elif opts.accounts<>None:
        accounts=[item.strip() for item in opts.accounts.split(",")]
    else:
        accounts=j.system.fs.listDirsInDir("/opt/code", recursive=False, dirNameOnly=True, findDirectorySymlinks=True)
        accounts=j.console.askChoiceMultiple(accounts,"select bitbucketaccounts")

    for account in accounts:
        accountdir="/opt/code/%s"%account
        if j.system.fs.exists(accountdir):
            if opts.repos==None:
                reponames=j.system.fs.listDirsInDir(accountdir,recursive=False, dirNameOnly=True, findDirectorySymlinks=True)
                if  not opts.action in ['status']:
                    reponames=j.console.askChoiceMultiple(reponames,"select repos")
            elif opts.repos=="*":
                reponames=j.system.fs.listDirsInDir(accountdir,recursive=False, dirNameOnly=True, findDirectorySymlinks=True)
            else:
                reponames=[item.strip() for item in opts.repos.split(",")]

            for reponame in reponames:

                if reponame.find("__")<>-1:
                    branch,reponame=reponame.split("__",1)

                    repodir="%s/%s__%s"%(accountdir,branch,reponame)
                else:
                    raise RuntimeError("branch not specified in reponame.")

                if not j.system.fs.exists(path=repodir):
                    raise RuntimeError("Could not find mercurial repo on %s"%repodir)

                bitbucket = j.clients.bitbucket.getBitbucketRepoClient(account, reponame)
                
                cl=bitbucket.getMercurialClient(reponame,branch=branch)
                # cl=j.clients.mercurial.getClient(item)
                result.append((bitbucket,account,reponame,branch,cl,repodir))
    return result


repos=getRepos()

if opts.action == "status":
    print "\n\nSTATUS: account reponame                  branch added:modified:deleted   insyncwithremote?   localrev       remoterev"
    print "========================================================================================================================="


for bitbucket,account,reponame,branch,client,path in repos:

    if opts.action == "update" and opts.deletechanges:
        print "force update %s/%s"%(account,reponame)
        client.pull()
        client.update(force=True)
        continue

    if opts.action in ['status','commit','push','update']:

        mods=client.getModifiedFiles()

        lrev,lid,ttype,branch,user,msg,ddate=client.client.tip()
        branch=client.getbranchname()

        if opts.branch<>None:
            if branch<>opts.branch:
                print "set branch:%s"%opts.branch
                cmd="cd %s;hg branch %s"%(path,opts.branch)
                j.system.process.execute(cmd,dieOnNonZeroExitCode=False, outputToStdout=True, useShell=True, ignoreErrorOutput=False)                
                cmd="cd %s;hg update %s"%(path,opts.branch)
                j.system.process.execute(cmd)
                print "updated to branch:%s"%opts.branch
                lrev,lid,ttype,branch,user,msg,ddate=client.client.tip()
                branch=client.getbranchname()


        changesets=bitbucket.getChangeSets(reponame=reponame,limit=1)
        if changesets.has_key("error"):
            print "could not process repo: %s %s error:%s"%(account,reponame,changesets["error"]["message"])
            # print changesets            
            continue
        try:
            remotelastrevision=changesets["changesets"][0]["revision"]
        except Exception,e:
            
            ##TODO
            pass
            
        rid=changesets["changesets"][0]["raw_node"] #remoteid

        if lid==rid:
            reposync="Y"
        else:
            reposync="N"

        nrmods= len(mods["added"])+len(mods["nottracked"])+len(mods["modified"])+len(mods["missing"])+len(mods["removed"])

        if nrmods>0:
            reposync="N"            

        print "%-15s %-25s %-10s a%-3s:m%-3s:d%-9s reposync:%-9s  lrev:%-9s rrev:%-5s" %(account,reponame,client.branchname,\
            len(mods["added"])+len(mods["nottracked"]),len(mods["modified"]),len(mods["missing"])+len(mods["removed"]),\
            reposync,\
            lrev,remotelastrevision)

    if opts.action in ['push']:
        if nrmods==0 and reposync=="Y":
            print "no need to push, repo is in sync"
            continue

    if opts.action in ['update']:
        if nrmods==0 and reposync=="Y":
            print "no need to update, repo is in sync"
            continue

    if opts.action in ['commit']:        
        if nrmods==0:
            print "no need to commit, no mods"
            continue

    if opts.action in ['commit','push','update']:

        if opts.message==None and nrmods>0:
            opts.message=j.console.askString("commit message")


    if opts.update or opts.action =='update' or opts.action =='push':
        print "PULL ",
        client.pull()
        print "UPDATE ",
        client.updatemerge(commitMessage=opts.message, addRemoveUntrackedFiles=True, pull=False,force=opts.force)        
    
    if opts.action =='commit' or opts.action =='push':        
        print "COMMIT ",
        client.commit(message=opts.message, addremove=True, checkStatus=True, force=False)

        if opts.action =='push':
            print "PUSH ",
            if opts.branch<>None:
                client.push(branch=[opts.branch],newbranch=True)
            else:
                client.push(branch=None,newbranch=False)

    if opts.action in ['commit','push','update']:
        print




j.application.stop()
